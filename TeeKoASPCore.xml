<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TeeKoASPCore</name>
    </assembly>
    <members>
        <member name="T:TeeKoASPCore.GameHub">
            <summary>
            SignalR hub responsible for game interactions. Uses GameModel class as the underlying model.
            </summary>
        </member>
        <member name="F:TeeKoASPCore.GameHub.gamesList">
            <summary>
            List of ongoing games. A singletor recieved by DI.
            </summary>
        </member>
        <member name="F:TeeKoASPCore.GameHub.eventHandler">
            <summary>
            External singleton event handler which is used to redirect long term events from the transient GameHub.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.#ctor(TeeKoASPCore.Utility.GamesList,Microsoft.Extensions.Logging.ILogger{TeeKoASPCore.GameHub},TeeKoASPCore.Utility.GameHubEventHandler)">
            <summary>
            Basic ctor with parameters for DI
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.InformPhaseChanged(TeeKoASPCore.Models.GameModel,TeeKoASPCore.Models.GameModel.GameState)">
            <summary>
            Inform the clints about game phase change. 
            This should only be used to change the state immediatly. 
            For everything else see GameHubEventHandler.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.InformPlayersChanged(TeeKoASPCore.Models.GameModel)">
             <summary>
            Give the clients an update on the player list
             </summary>
             <param name="game">Game that should have it's clients informed.</param>
        </member>
        <member name="M:TeeKoASPCore.GameHub.SubmitDrawing(System.String,System.String)">
            <summary>
            Obtain a drawing and inform the client that a drawing was recieved from it
            </summary>
            <param name="drawingDataURL">Drawing data</param>
            <param name="gameId">Game id.</param>
        </member>
        <member name="M:TeeKoASPCore.GameHub.RequestComposingElements(System.String)">
            <summary>
            A request from client side to provide elements for compositions is handled here.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.RequestVotingCandidates(System.String)">
            <summary>
            A request from client side to provide compositions for voting is handled here.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.SubmitLine(System.String,System.String)">
            <summary>
            Obtain a line and inform the client that a line was recieved from it
            </summary>
            <param name="text">Line text</param>
            <param name="gameId">Game id</param>
        </member>
        <member name="M:TeeKoASPCore.GameHub.SubmitComposing(System.String,System.String,System.String)">
            <summary>
            Obtain a composing and inform the client that a composing was recieved from it
            </summary>
        </member>
        <member name="M:TeeKoASPCore.GameHub.SubmitVote(System.String,System.String,System.String)">
            <summary>
            Submit a vote on the composition.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel">
            <summary>
            Game model class that contains references to players, drawings, lines, compositions and scores. 
            Game state change is actually controlled by a game hub and an external singleton event handler.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel.GameState">
            <summary>
            Enum representing the game states.
            </summary>
        </member>
        <member name="F:TeeKoASPCore.Models.GameModel.phaseSequence">
            <summary>
            Ordered list representing game phases sequence.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel.Drawing">
            <summary>
            Struct representing a drawing as seen in game context. Consists of an image data url and an author id.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel.Line">
            <summary>
            Struct representing a line inputed during a game. Consists of a text and an aurhor id.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel.Composition">
            <summary>
            Struct representing a composition of a line and a drawing.
            </summary>
        </member>
        <member name="T:TeeKoASPCore.Models.GameModel.PlayerPublicStats">
            <summary>
            Struct representing a player score entry. Consists of a score number and player name.
            Struct is meant to be sent to client.
            </summary>
        </member>
        <member name="P:TeeKoASPCore.Models.GameModel.Owner">
            <summary>
            Game "Owner". Player who can start the game.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.Create">
            <summary>
            basic GameModel ctor which does not set a game owner.
            </summary>
            <returns></returns>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.Create(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            GameModel ctor which sets the game owner.
            </summary>
            <param name="owner">Game owner who may start the game.</param>
            <returns></returns>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.SetId">
            <summary>
            Set a unique game id.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.AddPlayer(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Add a player to the player list. Should probably be used only when handling game hub's OnConnected event.
            </summary>
            <param name="player">Player to be added to the game.</param>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.RemovePlayer(System.Security.Claims.ClaimsPrincipal)">
            <summary>
            REmove a player from the game. Should probably be used only when handling game hub's onDisconnect event.
            </summary>
            <param name="player"></param>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.AddDrawing(System.String,System.String)">
            <summary>
            Add a drawing to the game drawings pool.
            </summary>
            <param name="drawingDataUrl">Drawing data url</param>
            <param name="authorId">Author id</param>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.AddLine(System.String,System.String)">
            <summary>
            Add a line to game's line pool.
            </summary>
            <param name="text">Line text</param>
            <param name="authorId">Author id</param>
        </member>
        <member name="F:TeeKoASPCore.Models.GameModel.drawingsStaged">
            <summary>
            Drawings to be distributed among players to make compositions. 
            This list copies the drawings list and is then gradually reduced to empty or near empty as
            players recieve drawings to choose from.
            </summary>
        </member>
        <member name="F:TeeKoASPCore.Models.GameModel.linesStaged">
            <summary>
            Lines to be distributed among players to make compositions. 
            This list copies the lines list and is then gradually reduced to empty or near empty as
            players recieve lines to choose from.
            </summary>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.GetComposingElements">
            <summary>
            Get components for one player to make compositions from.
            </summary>
            <returns>A drawings list and a lines list.</returns>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.AddComposition(System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsPrincipal)">
            <summary>
            Add a composition to compositions pool.
            </summary>
            <param name="_img">Image data url.</param>
            <param name="imgAuthor">Image author id.</param>
            <param name="_line">Line text.</param>
            <param name="lineAuthor">Line author id.</param>
            <param name="compositionAuthor">Composition author id.</param>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.GetPublicStats">
            <summary>
            Get game scores with no private information (e.g. player id)
            </summary>
            <returns>Return a list of stats.</returns>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.CastVote(System.Security.Claims.ClaimsPrincipal,TeeKoASPCore.Models.GameModel.Composition)">
            <summary>
            Take in a vote on the compositions from a player and distribute points among authors. 
            </summary>
            <param name="voter">User who voted</param>
            <param name="composition">Composition that was chosen</param>
        </member>
        <member name="M:TeeKoASPCore.Models.GameModel.Reset">
            <summary>
            Clear drawings and lines.
            </summary>
        </member>
    </members>
</doc>
