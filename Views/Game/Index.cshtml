@using TeeKoASPCore.Models
@using TeeKoASPCore.Utility
@model GameModel

<head>
    <!-- stylesheet -->
    <link rel="stylesheet" href="~/css/literallycanvas.css" />
    <link rel="stylesheet" href="~/css/game.css" />

    <!-- dependency: React.js -->
    <script src="//cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-with-addons.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js"></script>

    <!-- Literally Canvas -->
    <script src="/js/literallycanvas.js"></script>
    <!--SignalR-->
    <script src="~/js/@@microsoft/signalr/dist/browser/signalr.js"></script>
</head>

<!--signalr stuff-->
<script type="text/javascript">

    //global counters
    var drawingsSent = @Model.drawings.Where(d=>d.authorId == Context.User.GetId()).Count();
    var linesSent = @Model.drawings.Where(d=> d.authorId == Context.User.GetId()).Count();

    //Phase change functions
    function PhaseChange(phase, phaseDuration) {


        var timeLeft = phaseDuration;
        setInterval(function () {
            if (timeLeft >= 0) {
                timeLeft -= 1;
                $("#timer").text(timeLeft + " seconds");
            }
        }, 1000);

        $("#gameStage").text( phase);

        if (phase == "drawing") {
            StartDrawing();
        }

        if (phase == "writing") {
        StartWriting();

        }
        if (phase == "composing") {
        StartComposing();
        }
        if (phase == "voting") {
        StartVoting();
        }

        if (phase == "waiting") {
            StartWaiting();
        }



    }
    //Globally accessible variable that will hold LC controller
    var lc;

    function StartDrawing() {

        
        $('#lobby').hide();
        $('#composingPhase').hide();
        $('#drawingPhase').show();
        $('#drawingPhase').css("opacity", "100%");
        $('#writingPhase').hide();
        $('#votingPhase').hide();


        linesSent = 0;
        $("#linesCount").text(linesSent + '/' + @Model.maxLinesPerPlayer);

        //start lc
        //Note: it is crucial to init lc only on elements that AREN'T 0x0 size
        lc = LC.init(
            document.getElementsByClassName('my-drawing')[0],
            {
                imageURLPrefix: '/images/literallycanvas',
                imageSize: { width: 600, height: 400 },
                tools:
                    [
                        LC.tools.Pencil,
                        LC.tools.Eraser,
                        LC.tools.Line,
                        LC.tools.Rectangle,
                        LC.tools.Polygon,
                        LC.tools.Pan,
                        LC.tools.Eyedropper
                    ]
            }
        );

    }

    function StartWriting() {

        //Try submitting in case someone didn't submit in time
        $('#submitDrawing').click();

        $('#lobby').hide();
        $('#composingPhase').hide();
        $('#drawingPhase').hide();
        $('#writingPhase').show();
        $('#votingPhase').hide();
    }

    function StartComposing() {
        $("#composing-drawings").empty();
        $("#composing-lines").empty();

        $('#lobby').hide();
        $('#composingPhase').show();
        $('#drawingPhase').hide();
        $('#writingPhase').hide();
        $('#votingPhase').hide();
        
        hubConnection.invoke("RequestComposingElements", "@Model.GameID");
        
    }

    function StartVoting() {

        selectedImage = "";
        selectedLine = "";

        $("#compositionsHolder").empty();

        $('#lobby').hide();
        $('#composingPhase').hide();
        $('#drawingPhase').hide();
        $('#writingPhase').hide();
        $('#votingPhase').show();

        hubConnection.invoke("RequestVotingCandidates", "@Model.GameID");
    }

    function StartWaiting() {

        drawingsSent = 0;

        selectedImage = "";
        selectedLine = "";

        $("#timer").text("until game host is ready");
        $('#lobby').show();
        $('#drawingPhase').hide();
        $('#writingPhase').hide();
        $('#votingPhase').hide();
    }

    //Globally accissible hubConnection
    var hubConnection;

    //Setup
    $(function () {
        hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/game", {
                skipNegotiation: true,
                transport: signalR.HttpTransportType.WebSockets
            })
            .build();
        var canvas = $('.my-drawing');

        //Recieving
        hubConnection.on("PhaseChange", function (phase, phaseDuration) { PhaseChange(phase, phaseDuration) } );

        //Feedback from server — server recieved a drawing
        hubConnection.on("DrawingRecieved", function () {
            drawingsSent += 1;
            $("#drawingCount").text(drawingsSent + '/' + @Model.maxDrawingsPerPlayer);
        });

        //Feedback from server — server recieved the last allowed drawing
        hubConnection.on("LastDrawingRecieved", function () {

            $("#gameStage").text($("#gameStage").text() + " waiting for other players");
            $('#drawingPhase').hide();
        });

        //Feedback from server — server recieved a line
        hubConnection.on("LineRecieved", function () {
            linesSent += 1;
            $("#linesCount").text(linesSent + '/' + @Model.maxLinesPerPlayer);
        });

        //Feedback from server — server recieved the last allowed line
        hubConnection.on("LastLineRecieved", function () {
            $("#gameStage").text($("#gameStage").text() + " waiting for other players");
            $('#writingPhase').hide();

        });

        //Feedback from server — server recieved the composition
        hubConnection.on("CompositionRecieved", function () {
            $("#gameStage").text($("#gameStage").text() + " waiting for other players");
            $('#composingPhase').hide();

        });

        //Feedback from server — server recieved the vote
        hubConnection.on("VoteRecieved", function () {
            $("#gameStage").text($("#gameStage").text() + " waiting for other players");
            $('#votingPhase').hide();

        });

        var selectedImage;
        
        var selectedLine;

        //Feedback from server — server sent the requested elements for composing phase
        hubConnection.on("ComposingElementsProvided", function (drawings, lines) {
            //append all drawings recieved with their authorid as values
            for (var i = 0; i < drawings.length; i++) {
                $('<img/>', {
                    "class": 'composing-drawing',
                    "src": drawings[i].imgDataUrl,
                    "style": "width: 300px; height: 300px; border: 2px double black"
                    
                    

                }).appendTo('#composing-drawings');
            }
            // Set image behaviours
            $('.composing-drawing').click(function (e) {
                var element = $(e.target);
                selectedImage = element.attr('src');;
                $('.composing-drawing').css("border", "2px double black");
                element.css("border", "4px solid blue");
            });

            //same for lines
            for (var i = 0; i < lines.length; i++) {
                var line = $('<div/>', {
                    "class": 'composing-line',
                    "style": "font-size: large; border: 2px double black; width:100%"
                });
                line.text(lines[i].text);
                line.appendTo('#composing-lines');
                //$('<br/>').appendTo('#composing-lines');
            }

            // Set lines behaviours
            $('.composing-line').click(function (e) {
                var element = $(e.target);
                selectedLine = element.text();
                $('.composing-line').css("border", "2px double black");
                element.css("border", "4px solid blue");
            });
        });


        var defaultCandidateStyle = "border: 4px double black";

        //Feedback from server — server sent the requested elements for composing phase
        hubConnection.on("VotingCandidatesProvided", function (compositions) {
            //append all drawings recieved with their authorid as values
            for (var i = 0; i < compositions.length; i++) {
                var div = $('<div/>', {
                    "class": 'voting-candidate',
                    "style": defaultCandidateStyle
                });

                var img = $('<img/>', {
                    "class": 'voting-drawing',
                    "src": compositions[i].drawing.imgDataUrl,
                    "style": "width: 400px; height: 400px;"
                });

                var text = $('<div/>', {
                    "class": 'voting-text'
                });
                text.text(compositions[i].line.text);
                div.append(img);
                div.append(text);
                $("#compositionsHolder").append(div);
                
            }
            // Set candidate behaviours
            $(".voting-candidate").click(function (e) {
                var element = $(this);

                selectedImage = element.find(".voting-drawing").attr('src');
                selectedLine = element.find(".voting-text").text();
                $('.voting-drawing').css(defaultCandidateStyle);
                element.css("border", "4px solid blue");
            });
            

            
        });


        //When an update on player list arrives
        hubConnection.on("PlayersChanged", function (publicStats) {
            $("#player-count").text(publicStats.length);
            $("#player-list").empty()
            var stats = publicStats;
            for (var i = 0; i < stats.length; i++) {
                $("#player-list").append('<li>' + stats[i].name + " — " + stats[i].score + " points" + '</li>');
            }
        });

         

       
        //Sending drawings
        $('#submitDrawing').click(function () {
            if (drawingsSent >=@Model.maxDrawingsPerPlayer) {
                if ($("#drcountalert").length <= 3) {
                    var alert = $("<h4 class='alert-danger' id='drcountalert'></h4>").text("You already submited the maximum amout of drawings.");
                    $("#drawingPhase").append(alert);
                }
            }
            else {
                hubConnection.invoke("submitDrawing", lc.getImage().toDataURL(), "@Model.GameID");
                lc.clear();
            }
       });

        //when enter is pressed on line input field
        $('#lineInput').keypress(function (event) {
            if (event.which == 13) {
                $('#submitLine').click();
            }
        });

        //Sending lines
        $('#submitLine').click(function () {
            if (linesSent >=@Model.maxLinesPerPlayer) {
                if ($("#lncountalert").length <= 3) {
                    var alert = $("<h4 class='alert-danger' id='lncountalert'></h4>").text("You already submited the maximum amout of lines.");
                    $("#writingPhase").append(alert);
                }
            }
            else {
                hubConnection.invoke("submitLine", $("#lineInput").val(), "@Model.GameID");
                lc.clear();
                $("#lineInput").val("");
            }
       });

        //Sending compositions
        $('#submitComposition').click(function () {
            if (selectedImage.length == 0 || selectedLine.length==0) {
                alert("Select an image and a line of text first!");
            }
            else {
                hubConnection.invoke("SubmitComposing",
                    selectedImage, selectedLine,
                    "@Model.GameID");
            }
        });

         //Sending compositions
        $('#submitVote').click(function () {
            if (selectedImage.length == 0 || selectedLine.length==0) {
                alert("Select an image and a line of text first!");
            }
            else {
                hubConnection.invoke("SubmitVote",
                    selectedImage, selectedLine,
                    "@Model.GameID");
            }
       });

       $('#startGame').click(function () {

           hubConnection.invoke("startGame", "@Model.GameID");
       });

        //Start
        hubConnection.start().then(function () {
            @if (Model.Owner.IsIdentical(User))
            {
            <text>
            hubConnection.invoke("StartLobby", "@Model.GameID");
            </text>
            }
            hubConnection.invoke("Connected", "@Model.GameID");
        });


        });
</script>

Game ID: @Model?.GameID
Your name: @User.Claims.First().Value



<div class="container">

    <div class="panel-info" style="float:initial">
        Game Stage:
        <i id="gameStage">Preparation</i>
        <br />
        <i>Time left:</i>
        <i id="timer"> </i>

    </div>

    <div id="lobby" class="container " style="float:left">
        <div>
            @if (Model.Owner.IsIdentical(User))
            {
                <button type="button" id="startGame">Start the Game</button>
            }
        </div>
        <ul class="list-group"></ul>
    </div>



    <div class="panel-default" style="float:right">

        Player count:
        <i id="player-count">
            @Model?.Players.Count()
        </i>
        <ul class="list-group" id="player-list"></ul>
    </div>


    <div class="panel" id="drawingPhase" hidden="true" style="width:80%">


        <h4 style="position:center">Draw your pictures here!</h4>
        <i>Drawings sent:</i>
        <i id="drawingCount">0/@Model.maxDrawingsPerPlayer</i>


        <div class="my-drawing"></div>
        <div style="position=centre">
            <button type="button" id="submitDrawing">Submit</button>
        </div>


    </div>

    <div class="panel" id="writingPhase" hidden="true">

        <h4 style="position:center">Input your lines here! One at a time, max length = 20 symbols.</h4>
        <div>
            <i>Lines sent:</i>
            <i id="linesCount">0/@Model.maxLinesPerPlayer</i>
        </div>


        <div style="position:center">
            <input id="lineInput" type="text" maxlength="20">

            <button type="button" id="submitLine">Submit</button>
        </div>

    </div>

    <div class="panel" id="composingPhase" hidden="true">

        <button type="button" id="submitComposition" style="left:50%; width:25%; font-size:large; height: 1.2em">Submit</button>
        <div>
            <div id="composing-drawings"  style="float:left; width:50%"></div>
            <div id="composing-lines"  style="float:right; width:50%"></div>
        </div>
    </div>


    <div class="panel" id="votingPhase" hidden="true">
        <button type="button" id="submitVote" style="left:50%; width:25%; font-size:large; height: 1.2em">Submit</button>
        <div id="compositionsHolder" class="well" style="float:left; width:80%;"></div>

    </div>


</div>